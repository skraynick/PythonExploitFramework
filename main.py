import time

import shodan
import pyfiglet
import tkinter as tk
from tkinter import ttk, Text, Label, Toplevel, Button, Entry, Menu

from tkinter.messagebox import showinfo
from functools import partial
from tkinter.scrolledtext import ScrolledText
from threading import Thread
import requests
import argparse
from configparser import ConfigParser
import json


class Main:
    root = tk.Tk()
    frame = tk.Frame(root)

    api_key = tk.StringVar()
    shodan_query = tk.StringVar()
    shodan_query_page = tk.StringVar()
    instances = ""
    searchFrame = tk.Frame(root)
    count = 0


def read_shodan_search():
    """Handles the CLI user interactions.
        Returns:
            argparse.Namespace: Populated namespace object
        """
    parser = argparse.ArgumentParser(description="Search Term")
    parser.add_argument(
        "search", nargs="+", type=str, help="Search query for shodan."

    )
    args = parser.parse_args()
    search = args.search
    return search[0]


def get_shodan_api_key():
    top = Toplevel(Main.root)
    top.geometry("250x250")
    top.title("Enter your API key!")
    api_label = Label(top, text="Shodan Api Key:")
    api_label.pack()

    api_key_entry = ttk.Entry(top, textvariable=Main.api_key)
    api_key_entry.pack()
    api_key_entry.focus()
    save_button = ttk.Button(top, text="Save", command=partial(save_api_key, top))
    save_button.pack()


def save_api_key(top):
    if len(Main.api_key.get()) > 0:
        msg = f'Your api key: {Main.api_key.get()}'
        showinfo(
            title='Information',
            message=msg
        )
        top.destroy()
        # Main.t.insert(tk.END, msg)


def set_layout_search():
    Main.searchFrame.pack()
    Label(Main.searchFrame, text="Shodan Search term (1st box) and pages (2nd box).").pack(side="left")
    Entry(Main.searchFrame, textvariable=Main.shodan_query).pack(side="left")
    Entry(Main.searchFrame, textvariable=Main.shodan_query_page).pack(side="left")
    Button(Main.searchFrame, text="Search", command=request_page_from_shodan).pack(side="left")
    Main.searchFrame.update()


def search_result(text):
    frame = tk.Frame(Main.root)
    frame.pack()
    Label(frame, text="Search Results: ")
    st = ScrolledText(frame,
                      width=60,
                      height=10,
                      font=("Times New Roman",
                            15))
    st.insert(tk.INSERT, text)
    st.update()
    return frame


def request_page_from_shodan():
    # TODO - look up event loop.... ;)
    global results

    while True:
        try:
            if len(Main.api_key.get()) > 0:
                # api = shodan.Shodan(Main.api_key.get())
                # Main.instances = api.search(Main.shodan_query.get(), page=Main.shodan_query_page.get())
                # setting limit for testing purposes.
                Main.instances = Main.shodan_query.get()  # api.search(Main.shodan_query.get(), limit=10)
                if Main.count == 0:
                    search_result(Main.instances)
                    Main.count += 1
                else:
                    search_field = search_result(Main.instances)
                    search_field.destroy()
                    search_result(Main.instances)
            return Main.instances
        except shodan.APIError as error:
            print(f'Error: {error}')
            time.sleep(5)


def request_page_from_shodan_cli(api, search_query):
    # TODO - look up event loop.... ;)
    while True:
        try:
            api = shodan.Shodan(api)
            Main.instances = api.search(search_query, limit=1)
            # setting limit for testing purposes.
            json_formatted_str = json.dumps(Main.instances, indent=4)
            print(json_formatted_str)
            return Main.instances
        except shodan.APIError as error:
            print(f'Error: {error}')
            time.sleep(5)


def add_menu():
    menubar = Menu(Main.root)
    file = Menu(menubar)
    menubar.add_cascade(label="File", menu=file)
    file.add_command(label='New File', command=None)
    file.add_command(label='Open...', command=None)
    file.add_command(label='Save', command=None)
    file.add_separator()
    file.add_command(label='Exit', command=Main.root.destroy)

    # Settings menu items.
    settings = Menu(menubar)
    menubar.add_cascade(label='Settings', menu=settings)
    settings.add_command(label='Shodan API', command=get_shodan_api_key)
    settings.add_separator()

    # Tools menu items.
    tools = Menu(menubar)
    menubar.add_cascade(label='Tools', menu=tools)
    tools.add_command(label='Shodan Search', command=set_layout_search)
    tools.add_command(label='DoS Tool', command=None)
    tools.add_command(label='WIFI Packet Sniffer', command=None)
    tools.add_separator()

    # Help Menu items
    help = Menu(menubar)
    menubar.add_cascade(label='Help', menu=help)
    help.add_command(label='PyEX Help', command=None)
    help.add_command(label='Demo.. hell no.lol', command=None)
    help.add_separator()
    help.add_command(label='About Python Exploit', command=help_menu_item)

    Main.root.config(menu=menubar)


def help_menu_item():
    showinfo(
        title='About',
        message="Eventually I will add text, for now this will have to do... lol. Peace."
    )


def main():
    Main.root.title('Python Exploit Tool')
    add_menu()
    # Label(Main.root, text=" Click the Below Button to enter your Shodan API Key.", font='Helvetica 14 bold').pack()
    # Button(Main.root, text="Enter API key!", command=get_shodan_api_key).pack()

    # result = pyfiglet.figlet_format("Python Exploit")
    # print(result)
    # set_layout_search()
    # st = ScrolledText(Main.root, width=50, height=10)
    # st.pack(side="bottom")

    Main.root.geometry('800x400+50+50')
    Main.root.mainloop()


if __name__ == '__main__':
    config = ConfigParser()
    config.read('api_keys.ini')
    configure_api = config.get('api', 'shodan_api')
    print(configure_api)
    request_page_from_shodan_cli(configure_api, read_shodan_search())

    # main()
    read_shodan_search()
